// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProof2MetaData contains all meta data concerning the OneStepProof2 contract.
var OneStepProof2MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"afterMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[4]\",\"name\":\"fields\",\"type\":\"bytes32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStepDebug\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"startMachine\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"afterMachine\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"parseProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50614568806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806347dda1d614610046578063793deea314610162578063eba67f6e14610329575b600080fd5b610112600480360360e081101561005c57600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561008457600080fd5b82018360208201111561009657600080fd5b803590602001918460018302840111600160201b831117156100b757600080fd5b919390929091602081019035600160201b8111156100d457600080fd5b8201836020820111156100e657600080fd5b803590602001918460018302840111600160201b8311171561010757600080fd5b5090925090506104d3565b604080516001600160401b03851681526020810184905290810182608080838360005b8381101561014d578181015183820152602001610135565b50505050905001935050505060405180910390f35b6102066004803603602081101561017857600080fd5b810190602081018135600160201b81111561019257600080fd5b8201836020820111156101a457600080fd5b803590602001918460018302840111600160201b831117156101c557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610592945050505050565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561025257818101518382015260200161023a565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015610291578181015183820152602001610279565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156102d05781810151838201526020016102b8565b50505050905001858103825286818151815260200191508051906020019060200280838360005b8381101561030f5781810151838201526020016102f7565b505050509050019850505050505050505060405180910390f35b6103f5600480360360e081101561033f57600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561036757600080fd5b82018360208201111561037957600080fd5b803590602001918460018302840111600160201b8311171561039a57600080fd5b919390929091602081019035600160201b8111156103b757600080fd5b8201836020820111156103c957600080fd5b803590602001918460018302840111600160201b831117156103ea57600080fd5b5090925090506105ce565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561043657818101518382015260200161041e565b50505050905090810190601f1680156104635780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561049657818101518382015260200161047e565b50505050905090810190601f1680156104c35780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6000806104de614358565b6104e6614376565b61056a8a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600081840152601f19601f820116905080830192505050505050508f610693565b905061057581610b4a565b61057e81610f60565b935093509350509750975097945050505050565b6060806060806105a0614408565b6105a986610fc3565b80516020820151604083015160609093015191975095509093509150505b9193509193565b6060806105d9614376565b61065d898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508e610693565b905061066881610b4a565b61067581604001516110bb565b925061068481606001516110bb565b91505097509795505050505050565b61069b614376565b6000846000815181106106aa57fe5b602001015160f81c60f81b60f81c90506000856001815181106106c957fe5b602001015160f81c60f81b60f81c90506000866002815181106106e857fe5b016020015160f81c9050600360606004840160ff166001600160401b038111801561071257600080fd5b5060405190808252806020026020018201604052801561074c57816020015b610739614430565b8152602001906001900390816107315790505b50905060608360040160ff166001600160401b038111801561076d57600080fd5b506040519080825280602002602001820160405280156107a757816020015b610794614430565b81526020019060019003908161078c5790505b50905060005b8560ff168110156107e3576107c28b856113c4565b8483815181106107ce57fe5b602090810291909101015293506001016107ad565b5060005b8460ff1681101561081d576107fc8b856113c4565b83838151811061080857fe5b602090810291909101015293506001016107e7565b5061082661446d565b6108308b85611586565b809250819550505060008b858151811061084657fe5b01602001516001959095019460f81c905061085f614376565b6001600160a01b038b35811682526020808d0135909116908201526040810183905261088a83611626565b6060820152608081018f90528d3560a08201526020808f013560c0830152600060e0830181905260408051808201825260ff8c811682528185018a905261010086019190915281518083019092528a8116825292810187905261012084015283821660018114610140850152918b1661016084015261018083018f90526101c083018e90526101e08301526101a08201879052158061092c57508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906109d95760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561099e578181015183820152602001610986565b50505050905090810190601f1680156109cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506109e2614430565b60ff8316610a03576109fc8a83604001516000015161168f565b9050610aa3565b6000865111604051806040016040528060068152602001654e4f5f494d4d60d01b81525090610a735760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561099e578181015183820152602001610986565b50610aa08a8360400151600001518860018d0360ff1681518110610a9357fe5b60200260200101516116f3565b90505b610aac81611779565b60408301515260005b838a0360ff16811015610af457610aec878281518110610ad157fe5b602002602001015184604001516118e690919063ffffffff16565b600101610ab5565b5060005b8860ff16811015610b3557610b2d868281518110610b1257fe5b6020026020010151846040015161190090919063ffffffff16565b600101610af8565b50909f9e505050505050505050505050505050565b60008060006144cb610b6385610160015160ff1661191a565b93509350935093506000841180610b7d5750846101400151155b8015610b8f5750610100850151518410155b80610bb757508461014001518015610ba5575083155b8015610bb75750610100850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610c265760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561099e578181015183820152602001610986565b50610120850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610c9c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561099e578181015183820152602001610986565b5061010085015151841115610d5a57610cbb610cb6611a48565b611779565b610ccc866060015160200151611779565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610d3f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561099e578181015183820152602001610986565b50610d4b856005611a8f565b50610d5585611b04565b610e1a565b61012085015151831115610df557610d73610cb6611a48565b610d84866060015160400151611779565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610d3f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561099e578181015183820152602001610986565b610dff8583611a8f565b15610e0d57610d5585611b04565b610e1a858263ffffffff16565b846101e0015115610ebf5760408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120606086015160c001511415610e8157610e7c8560600151611b0f565b610ebf565b60006101e0860152606085015160c081015190526101408501518015610ea5575083155b610eb457610100850151600090525b610120850151600090525b60005b61010086015151811015610f0b57610f03866101000151602001518281518110610ee857fe5b602002602001015187606001516118e690919063ffffffff16565b600101610ec2565b5060005b61012086015151811015610f5857610f50866101200151602001518281518110610f3557fe5b6020026020010151876060015161190090919063ffffffff16565b600101610f0f565b505050505050565b600080610f6b614358565b8360e0015184608001516040518060800160405280610f8d8860400151611b19565b8152602001610f9f8860600151611b19565b81526020018760a0015181526020018760c001518152509250925092509193909250565b610fcb614408565b606061100a8384600081518110610fde57fe5b602001015160f81c60f81b85600181518110610ff657fe5b01602001516001600160f81b031916611bdd565b90506060611037848560018151811061101f57fe5b602001015160f81c60f81b86600281518110610ff657fe5b90506060611064858660028151811061104c57fe5b602001015160f81c60f81b87600381518110610ff657fe5b90506060611091868760038151811061107957fe5b602001015160f81c60f81b88600481518110610ff657fe5b6040805160808101825295865260208601949094529284019190915250606082015290505b919050565b60606110ca8260000151611c7a565b6110df6110da8460200151611779565b611c7a565b6110ef6110da8560400151611779565b6110ff6110da8660600151611779565b61110f6110da8760800151611779565b61111c8760a00151611d49565b6111298860c00151611c7a565b60405160200180806709ac2c6d0d2dcca560c31b81525060080188805190602001908083835b6020831061116e5780518252601f19909201916020918201910161114f565b51815160209384036101000a60001901801990921691161790526216100560e91b9190930190815289516003909101928a0191508083835b602083106111c55780518252601f1990920191602091820191016111a6565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528851600390910192890191508083835b6020831061121c5780518252601f1990920191602091820191016111fd565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528751600390910192880191508083835b602083106112735780518252601f199092019160209182019101611254565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528651600390910192870191508083835b602083106112ca5780518252601f1990920191602091820191016112ab565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528551600390910192860191508083835b602083106113215780518252601f199092019160209182019101611302565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528451600390910192850191508083835b602083106113785780518252601f199092019160209182019101611359565b5181516020939093036101000a600019018019909116921691909117905261148560f11b92019182525060408051808303601d19018152600290920190529a9950505050505050505050565b60006113ce614430565b83518310611414576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b6000806114218686611e23565b9150915061142d611e4a565b60ff168160ff1614156114615760006114468784611e4f565b90935090508261145582611ec3565b9450945050505061157f565b611469611f83565b60ff168160ff16141561148b576114808683611f88565b93509350505061157f565b61149361202a565b60ff168160ff1614156114bb5760006114ac8784611e4f565b9093509050826114558261202f565b6114c361211b565b60ff168160ff1614156114da576114808683612120565b6114e26121b5565b60ff168160ff161015801561150357506114fa6121ba565b60ff168160ff16105b1561153f5760006115126121b5565b8203905060606115238289866121bf565b90945090508361153282612267565b955095505050505061157f565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b600061159061446d565b61159861446d565b600060e08201819052806115ac8787611e4f565b90965091506115bb8787612120565b602085015295506115cc8787612120565b604085015295506115dd87876113c4565b606085015295506115ee87876113c4565b608085015295506115ff8787611e4f565b60a085015295506116108787611e4f565b92845260c0840192909252509590945092505050565b61162e61446d565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611697614430565b6040805160608101825260ff8516815260208082018590528251600080825291810184526116ea938301916116e2565b6116cf614430565b8152602001906001900390816116c75790505b5090526123a8565b90505b92915050565b6116fb614430565b604080516001808252818301909252606091816020015b61171a614430565b815260200190600190039081611712579050509050828160008151811061173d57fe5b602002602001018190525061176e60405180606001604052808760ff168152602001868152602001838152506123a8565b9150505b9392505050565b6000611783611e4a565b60ff16826080015160ff1614156117a657815161179f90612438565b90506110b6565b6117ae611f83565b60ff16826080015160ff1614156117cc5761179f826020015161245c565b6117d461211b565b60ff16826080015160ff1614156117f657815160a083015161179f9190612559565b6117fe6121b5565b60ff16826080015160ff16141561183757611817614430565b61182483604001516125aa565b905061182f81611779565b9150506110b6565b61183f612722565b60ff16826080015160ff161415611858575080516110b6565b61186061202a565b60ff16826080015160ff1614156118a5575060608082015160408051607b602080830191909152818301939093528151808203830181529301905281519101206110b6565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6118f4826020015182612727565b82602001819052505050565b61190e826040015182612727565b82604001819052505050565b600080806144cb60a185141561193f57506002925060009150600a90506127a56105c7565b60a285141561195d57506002925060009150600a905061285c6105c7565b60a385141561197b57506002925060009150600a90506128f06105c7565b60a485141561199957506003925060009150606490506129846105c7565b60a58514156119b75750600392506000915060649050612a756105c7565b60a68514156119d55750600392506000915060649050612b496105c7565b60708514156119f35750600292506000915060649050612c0b6105c7565b6026851415611a1157506001925060009150600a9050612da76105c7565b60405162461bcd60e51b815260040180806020018281038252602c815260200180614507602c913960400191505060405180910390fd5b611a50614430565b60408051600080825260208201909252611a8a91611a84565b611a71614430565b815260200190600190039081611a695790505b50612267565b905090565b6000816001600160401b0316836060015160a001511015611ad4575060e0820180516005016001600160401b03169052606082015160001960a09091015260016116ed565b5060e0820180516001600160401b039083018116909152606083015160a0018051918316909103905260006116ed565b60016101e090910152565b600160e090910152565b600060028260e001511415611b30575060006110b6565b60018260e001511415611b45575060016110b6565b81516020830151611b5590611779565b611b628460400151611779565b611b6f8560600151611779565b611b7c8660800151611779565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090506110b6565b606060f883811c9083901c81900360ff169082826001600160401b0381118015611c0657600080fd5b50604051908082528060200260200182016040528015611c30578160200160208202803683370190505b50905060005b83811015611c6f57611c4d88828501602002613215565b60001b828281518110611c5c57fe5b6020908102919091010152600101611c36565b509695505050505050565b60408051818152606081810183529182919060208201818036833701905050905060005b6020811015611d42576000848260208110611cb557fe5b1a60f881811b9250601080830480831b9360ff9091169091029003901b611cdb82613255565b858560020281518110611cea57fe5b60200101906001600160f81b031916908160001a905350611d0a81613255565b858560020260010181518110611d1c57fe5b60200101906001600160f81b031916908160001a9053505060019092019150611c9e9050565b5092915050565b60608180611d705750506040805180820190915260018152600360fc1b60208201526110b6565b8060005b8115611d8857600101600a82049150611d74565b6060816001600160401b0381118015611da057600080fd5b506040519080825280601f01601f191660200182016040528015611dcb576020820181803683370190505b50905060001982015b8415611e1957600a850660300160f81b82828060019003935081518110611df757fe5b60200101906001600160f81b031916908160001a905350600a85049450611dd4565b5095945050505050565b60008082600101848481518110611e3657fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611e67575060208385510310155b611ea4576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611eb8858563ffffffff61328616565b915091509250929050565b611ecb614430565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191611f21565b611f0e614430565b815260200190600190039081611f065790505b50905281526020016000604051908082528060200260200182016040528015611f6457816020015b611f51614430565b815260200190600190039081611f495790505b5081526000602082018190526040820152600160609091015292915050565b600190565b6000611f92614430565b82600080611f9e614430565b6000611faa8986611e23565b9095509350611fb98986611e23565b9095509250600160ff85161415611fda57611fd489866113c4565b90955091505b611fe489866132df565b9095509050600160ff8516141561200f57846120018483856116f3565b96509650505050505061157f565b8461201a848361168f565b9650965050505050509250929050565b600c90565b612037614430565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b038111801561207e57600080fd5b506040519080825280602002602001820160405280156120b857816020015b6120a5614430565b81526020019060019003908161209d5790505b509052815260200160006040519080825280602002602001820160405280156120fb57816020015b6120e8614430565b8152602001906001900390816120e05790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b600061212a614430565b8284511015801561213f575060408385510310155b61217c576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60008061218986866132df565b90945091506121988685611e4f565b9094509050836121a883836132f6565b9350935050509250929050565b600390565b600d90565b60006060828160ff87166001600160401b03811180156121de57600080fd5b5060405190808252806020026020018201604052801561221857816020015b612205614430565b8152602001906001900390816121fd5790505b50905060005b8760ff168160ff16101561225a5761223687846113c4565b838360ff168151811061224557fe5b6020908102919091010152925060010161221e565b5090969095509350505050565b61226f614430565b61227982516133b5565b6122ca576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015612301578381815181106122e457fe5b602002602001015160a001518201915080806001019150506122cf565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b038111801561234957600080fd5b5060405190808252806020026020018201604052801561238357816020015b612370614430565b8152602001906001900390816123685790505b5090528152602081019490945260006040850152600360608501526080909301525090565b6123b0614430565b6040518060c001604052806000815260200183815260200160006001600160401b03811180156123df57600080fd5b5060405190808252806020026020018201604052801561241957816020015b612406614430565b8152602001906001900390816123fe5790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061246d57fe5b6040820151516124d25761247f611f83565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b9093166021850152602280850191909152825180850390910181526042909301909152815191012090506110b6565b6124da611f83565b826000015161250084604001516000815181106124f357fe5b6020026020010151611779565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b60006125636121b5565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b6125b2614430565b600882511115612600576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516001600160401b038111801561261957600080fd5b50604051908082528060200260200182016040528015612643578160200160208202803683370190505b508051909150600160005b828110156126a6576126658682815181106124f357fe5b84828151811061267157fe5b60200260200101818152505085818151811061268957fe5b602002602001015160a0015182019150808060010191505061264e565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b838110156126eb5781810151838201526020016126d3565b505050509050019250505060405160208183030381529060405280519060200120905061271881836132f6565b9695505050505050565b606490565b61272f614430565b6040805160028082526060828101909352816020015b61274d614430565b815260200190600190039081612745579050509050828160008151811061277057fe5b6020026020010181905250838160018151811061278957fe5b602002602001018190525061279d816125aa565b949350505050565b6127ad614430565b6127bb8261010001516133bc565b90506127c5614430565b6127d38361010001516133bc565b90506127de826133fe565b15806127f057506127ee8161341c565b155b15612805576127fe83613429565b5050612859565b8151600160401b1161281a576127fe83613429565b600061283c82606001518460000151612837876101c00151610fc3565b613432565b905061285584610100015161285083611ec3565b613454565b5050505b50565b612864614430565b6128728261010001516133bc565b905061287c614430565b61288a8361010001516133bc565b9050612895826133fe565b15806128a757506128a58161341c565b155b156128b5576127fe83613429565b815167fffffffffffffff9116128ce576127fe83613429565b600061283c826060015184600001516128eb876101c00151610fc3565b61347e565b6128f8614430565b6129068261010001516133bc565b9050612910614430565b61291e8361010001516133bc565b9050612929826133fe565b158061293b57506129398161341c565b155b15612949576127fe83613429565b815167ffffffffffffffe111612962576127fe83613429565b600061283c8260600151846000015161297f876101c00151610fc3565b6135de565b61298c614430565b61299a8261010001516133bc565b90506129a4614430565b6129b28361010001516133bc565b90506129bc614430565b6129ca8461010001516133bc565b90506129d5836133fe565b15806129e757506129e582613712565b155b806129f857506129f68161341c565b155b15612a0e57612a0684613429565b505050612859565b8251600160401b111580612a255750815161010011155b15612a3357612a0684613429565b6000612a5a826060015185600001518560000151612a55896101c00151610fc3565b61371d565b9050612a6e8561010001516128508361202f565b5050505050565b612a7d614430565b612a8b8261010001516133bc565b9050612a95614430565b612aa38361010001516133bc565b9050612aad614430565b612abb8461010001516133bc565b9050612ac6836133fe565b1580612ad85750612ad682613712565b155b80612ae95750612ae78161341c565b155b15612af757612a0684613429565b825167fffffffffffffff9111580612b1457508151600160401b11155b15612b2257612a0684613429565b6000612a5a826060015185600001518560000151612b44896101c00151610fc3565b613766565b612b51614430565b612b5f8261010001516133bc565b9050612b69614430565b612b778361010001516133bc565b9050612b81614430565b612b8f8461010001516133bc565b9050612b9a836133fe565b1580612bac5750612baa82613712565b155b80612bbd5750612bbb8161341c565b155b15612bcb57612a0684613429565b825167ffffffffffffffe111612be457612a0684613429565b6000612a5a826060015185600001518560000151612c06896101c00151610fc3565b6138af565b612c13614430565b612c218261010001516133bc565b9050612c2b614430565b612c398361010001516133bc565b9050612c44826133fe565b1580612c565750612c548161341c565b155b15612c64576127fe83613429565b81516127101080612c7457508151155b15612c82576127fe83613429565b82610180015151836101a001511415612cfd57612cb581606001518360000151612cb0866101c00151610fc3565b613981565b15612cf4576040805162461bcd60e51b815260206004820152600a602482015269084aa8cbe988a9c8ea8960b31b604482015290519081900360640190fd5b6127fe83613429565b6101a083015182516101808501516000612d188285856139d5565b905080612d2486611779565b14612d63576040805162461bcd60e51b815260206004820152600a60248201526915d493d391d7d4d1539160b21b604482015290519081900360640190fd5b5090910160209081019190912060a0850180516040805180860192909252818101939093528251808203840181526060909101909252815191909201209052505050565b612daf614430565b612dbd8261010001516133bc565b9050612dc88161341c565b612ddb57612dd582613429565b50612859565b816101a00151602001826101800151511415612f04576000612e07836101800151846101a00151613215565b9050600160401b8110612e58576040805162461bcd60e51b8152602060048201526014602482015273424c414b4532465f4255465f4241445f53495a4560601b604482015290519081900360640190fd5b60d5811015612ea5576040805162461bcd60e51b8152602060048201526014602482015273424c414b4532465f4255465f4241445f53495a4560601b604482015290519081900360640190fd5b612ebc826060015182612837866101c00151610fc3565b612cf4576040805162461bcd60e51b8152602060048201526014602482015273424c414b4532465f4c4f4e474255465f5a45524f60601b604482015290519081900360640190fd5b60d5826101a00151018261018001515114612f5e576040805162461bcd60e51b815260206004820152601560248201527457524f4e475f424c414b4532465f4241444441544160581b604482015290519081900360640190fd5b6040805160d5808252610100820190925260609160208201818036833701905050905060005b60d5811015612fdb5783610180015181856101a001510181518110612fa557fe5b602001015160f81c60f81b828281518110612fbc57fe5b60200101906001600160f81b031916908160001a905350600101612f84565b506000612feb82600060d56139d5565b905080612ff784611779565b14613041576040805162461bcd60e51b815260206004820152601560248201527457524f4e475f424c414b4532465f4241444441544160581b604482015290519081900360640190fd5b8160d48151811061304e57fe5b6020910101516001600160f81b031916600160f81b148061308857508160d48151811061307757fe5b01602001516001600160f81b031916155b6130d1576040805162461bcd60e51b815260206004820152601560248201527457524f4e475f424c414b4532465f4241444441544160581b604482015290519081900360640190fd5b816000815181106130de57fe5b01602001516001600160f81b03191615158061311457508160018151811061310257fe5b01602001516001600160f81b03191615155b1561312257612a0684613429565b60008260038151811061313157fe5b602001015160f81c60f81b60f81c60ff1660088460028151811061315157fe5b016020015160f81c901b17905061316b85600a8302611a8f565b156131975760e085018051600919016001600160401b0316905261318e85611b04565b50505050612859565b604080518181526060818101835291602082018180368337019050509050600060406020830160d56020880160096107d05a03fa9050806131db576131db87613429565b60006131f683604060006131ef60406139f7565b6001613a22565b50905061320b8861010001516128508361202f565b5050505050505050565b600080805b602081101561324d57600882901b9150848185018151811061323857fe5b016020015160f81c919091179060010161321a565b509392505050565b6000600a60f883901c1015613275578160f81c60300160f81b90506110b6565b8160f81c60570160f81b90506110b6565b600081602001835110156132d6576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301611eb8858563ffffffff61328616565b6132fe614430565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191613354565b613341614430565b8152602001906001900390816133395790505b5090528152602001600060405190808252806020026020018201604052801561339757816020015b613384614430565b81526020019060019003908161337c5790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b6133c4614430565b6133cc614430565b82602001516001846000015103815181106133e357fe5b60209081029190910101518351600019018452915050919050565b608081015160009060ff161580156116ed57505051600160401b1190565b6080015160ff16600c1490565b61285981611b04565b600061279d61344a856020865b048560000151613afa565b6020855b06613c68565b80826020015183600001518151811061346957fe5b60209081029190910101525080516001019052565b6040805160088082528183019092526000916060919060208201818036833701905050905060006134b8866020875b048660000151613afa565b90506020808606600801111561358c5760006134e0876020885b046001018760400151613afa565b905060005b6018601f88166008030181101561353457613506838260208a5b0601613c68565b60f81b84828151811061351557fe5b60200101906001600160f81b031916908160001a9053506001016134e5565b506018601f8716600803015b60088110156135855761355782602089840161344e565b60f81b84828151811061356657fe5b60200101906001600160f81b031916908160001a905350600101613540565b50506135d5565b60005b60088110156135d3576135a582826020896134ff565b60f81b8382815181106135b457fe5b60200101906001600160f81b031916908160001a90535060010161358f565b505b61271882613c75565b604080516020808252818301909252600091606091906020820181803683370190505090506000613611866020876134ad565b9050602080860660200111156136cb57600061362f876020886134d2565b905060005b601f871660200381101561367d5761364f838260208a6134ff565b60f81b84828151811061365e57fe5b60200101906001600160f81b031916908160001a905350600101613634565b50601f86166020035b60208110156135855761369d82602089840161344e565b60f81b8482815181106136ac57fe5b60200101906001600160f81b031916908160001a905350600101613686565b60005b60208110156135d3576136e482826020896134ff565b60f81b8382815181106136f357fe5b60200101906001600160f81b031916908160001a9053506001016136ce565b6080015160ff161590565b60008061372c8660208761343f565b9050600061373e826020880687613cab565b9050600061375a88602089048488600001518960200151613cea565b98975050505050505050565b6000606061377384613d8a565b90506000613783876020886134ad565b9050602080870660080111156138655760005b6018601f8816600803018110156137de576137d4826020898401068584601801815181106137c057fe5b01602001516001600160f81b031916613df4565b9150600101613796565b506137f8876020885b048387600001518860200151613cea565b96506000613808886020896134d2565b90506018601f8816600803015b6008811015613841576138378260208a8401068684601801815181106137c057fe5b9150600101613815565b5061385d88602089046001018388604001518960600151613cea565b9750506138a4565b60005b60088110156138945761388a828260208a06018584601801815181106137c057fe5b9150600101613868565b506138a1876020886137e7565b96505b509495945050505050565b600060606138bc84613d8a565b905060006138cc876020886134ad565b90506020808706602001111561395e5760005b601f871660200381101561390e57613904828260208a5b06018584815181106137c057fe5b91506001016138df565b5061391b876020886137e7565b9650600061392b886020896134d2565b9050601f87166020035b6020811015613841576139548260208a8401068684815181106137c057fe5b9150600101613935565b60005b602081101561389457613977828260208a6138f6565b9150600101613961565b6000806139908560208661343f565b9050601f84165b60208110156139c2576139aa8282613c68565b156139ba57600092505050611772565b600101613997565b5061176e85602086048560000151613e10565b6000806139e985848601866131ef876139f7565b50905061176e607b82613f8c565b600060018211613a09575060016110b6565b613a18600260018401046139f7565b60020290506110b6565b60008060208411613a7657858510613a4957613a3e6000612438565b600191509150613af0565b6000613a5e613a5989888a613fb8565b612438565b905080613a6b6000612438565b909350149050613af0565b600080613a908989600289048a0160028a5b046000613a22565b91509150808015613a9e5750845b15613abe57613ab389898960028a0489613a22565b935093505050613af0565b600080613acf8b8b8b60028c613a88565b91509150613add8285613f8c565b818015613ae75750835b95509550505050505b9550959350505050565b6000815160001415613b6357613b106000612438565b8414613b5b576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b506000611772565b6000613b8283600081518110613b7557fe5b6020026020010151612438565b905060015b8351811015613bec578460011660011415613bc057613bb9848281518110613bab57fe5b602002602001015183613f8c565b9150613be0565b613bdd82858381518110613bd057fe5b6020026020010151613f8c565b91505b600194851c9401613b87565b50848114613c39576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b8315613c49575060009050611772565b82600081518110613c5657fe5b60200260200101519150509392505050565b601f036008021c60ff1690565b600080805b8351811015611d4257600882901b9150838181518110613c9657fe5b016020015160f81c9190911790600101613c7a565b60006060613cb885613d8a565b90508260f81b818581518110613cca57fe5b60200101906001600160f81b031916908160001a90535061176e81613c75565b60008151600314613d3c576040805162461bcd60e51b81526020600482015260176024820152762120a22fa727a926a0a624ad20aa24a7a72fa82927a7a360491b604482015290519081900360640190fd5b6127188686868686600081518110613d5057fe5b602002602001015160001c87600181518110613d6857fe5b602002602001015188600281518110613d7d57fe5b6020026020010151614017565b6040805160208082528183019092526060918391839160208201818036833701905050905060005b602081101561324d578260f81b8282601f0381518110613dce57fe5b60200101906001600160f81b031916908160001a90535060089290921c91600101613db2565b60006060613e0185613d8a565b905082818581518110613cca57fe5b6000815160001415613e7957613e266000612438565b8414613e71576040805162461bcd60e51b815260206004820152601560248201527432bc3832b1ba32b21032b6b83a3c90313ab33332b960591b604482015290519081900360640190fd5b506001611772565b6000613e8b83600081518110613b7557fe5b905060016060613e99614291565b905060015b8551811015613f2d578660011660011415613ed757613ed0868281518110613ec257fe5b602002602001015185613f8c565b9350613f21565b613ee784878381518110613bd057fe5b9350828015613f1e5750816001820381518110613f0057fe5b6020026020010151868281518110613f1457fe5b6020026020010151145b92505b600196871c9601613e9e565b50868314613f7a576040805162461bcd60e51b8152602060048201526015602482015274195e1c1958dd19590818dbdc9c9958dd081c9bdbdd605a1b604482015290519081900360640190fd5b8515611e195760019350505050611772565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600080805b602081101561400e57600882901b915060008186018511613fdf576000613ffd565b8682870181518110613fed57fe5b01602001516001600160f81b0319165b60f81c929092179150600101613fbd565b50949350505050565b60008061402387612438565b9050614030898988613afa565b50606061403b614291565b905060018751036001901b89106140ff578761405b578992505050614286565b60006140668a614332565b88519091505b600182038110156140945761408a8c846001840381518110613bd057fe5b9b5060010161406c565b5060015b600182038110156140ea578a600116600114156140c8576140c1836001830381518110613ec257fe5b93506140de565b6140db84846001840381518110613bd057fe5b93505b60019a8b1c9a01614098565b506140f58b84613f8c565b9350505050614286565b60015b875181101561417f5760008a60011660011461411e5783614133565b88828151811061412a57fe5b60200260200101515b905060008b60011660011461415b5789838151811061414e57fe5b602002602001015161415d565b845b90506141698282613f8c565b60019c8d1c9c9095509290920191506141029050565b50871561418e57509050614286565b60008661419c575084614211565b8187815181106141a857fe5b6020026020010151851415614204576040805162461bcd60e51b815260206004820152601c60248201527f726967687420737562747265652063616e6e6f74206265207a65726f00000000604482015290519081900360640190fd5b61420e8686613f8c565b90505b80875b60018a510381101561423a5761423082858381518110613bd057fe5b9150600101614214565b50838114614280576040805162461bcd60e51b815260206004820152600e60248201526d0caf0e0cac6e8cac840dac2e8c6d60931b604482015290519081900360640190fd5b50925050505b979650505050505050565b604080518181526108208101825260609182919060208201610800803683370190505090506142c06000612438565b816000815181106142cd57fe5b602090810291909101015260015b604081101561432c5761430d8260018303815181106142f657fe5b6020026020010151836001840381518110613bd057fe5b82828151811061431957fe5b60209081029190910101526001016142db565b50905090565b600081614341575060016110b6565b61434e600183901c614332565b60010190506110b6565b60405180608001604052806004906020820280368337509192915050565b60408051610200810182526000808252602082015290810161439661446d565b81526020016143a361446d565b81526000602082018190526040820181905260608201819052608082015260a0016143cc6144cd565b81526020016143d96144cd565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c09091015290565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040518060c001604052806000815260200161444a6144e7565b815260606020820181905260006040830181905290820181905260809091015290565b6040805161010081019091526000815260208101614489614430565b8152602001614496614430565b81526020016144a3614430565b81526020016144b0614430565b81526000602082018190526040820181905260609091015290565bfe5b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a2646970667358221220966b65839682602e03bc218b4e87e258fe74223feecb29ed609f12f999ddf6bc64736f6c634300060b0033",
}

// OneStepProof2ABI is the input ABI used to generate the binding from.
// Deprecated: Use OneStepProof2MetaData.ABI instead.
var OneStepProof2ABI = OneStepProof2MetaData.ABI

// OneStepProof2Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OneStepProof2MetaData.Bin instead.
var OneStepProof2Bin = OneStepProof2MetaData.Bin

// DeployOneStepProof2 deploys a new Ethereum contract, binding an instance of OneStepProof2 to it.
func DeployOneStepProof2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProof2, error) {
	parsed, err := OneStepProof2MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OneStepProof2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// OneStepProof2 is an auto generated Go binding around an Ethereum contract.
type OneStepProof2 struct {
	OneStepProof2Caller     // Read-only binding to the contract
	OneStepProof2Transactor // Write-only binding to the contract
	OneStepProof2Filterer   // Log filterer for contract events
}

// OneStepProof2Caller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProof2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProof2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProof2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProof2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProof2Session struct {
	Contract     *OneStepProof2    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProof2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProof2CallerSession struct {
	Contract *OneStepProof2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// OneStepProof2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProof2TransactorSession struct {
	Contract     *OneStepProof2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// OneStepProof2Raw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProof2Raw struct {
	Contract *OneStepProof2 // Generic contract binding to access the raw methods on
}

// OneStepProof2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProof2CallerRaw struct {
	Contract *OneStepProof2Caller // Generic read-only contract binding to access the raw methods on
}

// OneStepProof2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProof2TransactorRaw struct {
	Contract *OneStepProof2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProof2 creates a new instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2(address common.Address, backend bind.ContractBackend) (*OneStepProof2, error) {
	contract, err := bindOneStepProof2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2{OneStepProof2Caller: OneStepProof2Caller{contract: contract}, OneStepProof2Transactor: OneStepProof2Transactor{contract: contract}, OneStepProof2Filterer: OneStepProof2Filterer{contract: contract}}, nil
}

// NewOneStepProof2Caller creates a new read-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Caller(address common.Address, caller bind.ContractCaller) (*OneStepProof2Caller, error) {
	contract, err := bindOneStepProof2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Caller{contract: contract}, nil
}

// NewOneStepProof2Transactor creates a new write-only instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Transactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProof2Transactor, error) {
	contract, err := bindOneStepProof2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Transactor{contract: contract}, nil
}

// NewOneStepProof2Filterer creates a new log filterer instance of OneStepProof2, bound to a specific deployed contract.
func NewOneStepProof2Filterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProof2Filterer, error) {
	contract, err := bindOneStepProof2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProof2Filterer{contract: contract}, nil
}

// bindOneStepProof2 binds a generic wrapper to an already deployed contract.
func bindOneStepProof2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProof2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.OneStepProof2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.OneStepProof2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProof2 *OneStepProof2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProof2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProof2 *OneStepProof2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProof2.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStep(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStep", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		Gas               uint64
		AfterMessagesRead *big.Int
		Fields            [4][32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Gas = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.AfterMessagesRead = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Fields = *abi.ConvertType(out[2], new([4][32]byte)).(*[4][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProof2.Contract.ExecuteStep(&_OneStepProof2.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2Caller) ExecuteStepDebug(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "executeStepDebug", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		StartMachine string
		AfterMachine string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartMachine = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.AfterMachine = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2Session) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProof2.Contract.ExecuteStepDebug(&_OneStepProof2.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProof2 *OneStepProof2CallerSession) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProof2.Contract.ExecuteStepDebug(&_OneStepProof2.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Caller) ParseProof(opts *bind.CallOpts, proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	var out []interface{}
	err := _OneStepProof2.contract.Call(opts, &out, "parseProof", proof)

	if err != nil {
		return *new([][32]byte), *new([][32]byte), *new([][32]byte), *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	out1 := *abi.ConvertType(out[1], new([][32]byte)).(*[][32]byte)
	out2 := *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)
	out3 := *abi.ConvertType(out[3], new([][32]byte)).(*[][32]byte)

	return out0, out1, out2, out3, err

}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2Session) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}

// ParseProof is a free data retrieval call binding the contract method 0x793deea3.
//
// Solidity: function parseProof(bytes proof) pure returns(bytes32[], bytes32[], bytes32[], bytes32[])
func (_OneStepProof2 *OneStepProof2CallerSession) ParseProof(proof []byte) ([][32]byte, [][32]byte, [][32]byte, [][32]byte, error) {
	return _OneStepProof2.Contract.ParseProof(&_OneStepProof2.CallOpts, proof)
}
