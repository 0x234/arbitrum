// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofHashABI is the input ABI used to generate the binding from.
const OneStepProofHashABI = "[{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"afterMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[4]\",\"name\":\"fields\",\"type\":\"bytes32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStepDebug\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"startMachine\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"afterMachine\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// OneStepProofHashBin is the compiled bytecode used for deploying new contracts.
var OneStepProofHashBin = "0x608060405234801561001057600080fd5b50614522806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806347dda1d61461003b578063eba67f6e14610157575b600080fd5b610107600480360360e081101561005157600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111600160201b831117156100ac57600080fd5b919390929091602081019035600160201b8111156100c957600080fd5b8201836020820111156100db57600080fd5b803590602001918460018302840111600160201b831117156100fc57600080fd5b509092509050610301565b604080516001600160401b03851681526020810184905290810182608080838360005b8381101561014257818101518382015260200161012a565b50505050905001935050505060405180910390f35b610223600480360360e081101561016d57600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561019557600080fd5b8201836020820111156101a757600080fd5b803590602001918460018302840111600160201b831117156101c857600080fd5b919390929091602081019035600160201b8111156101e557600080fd5b8201836020820111156101f757600080fd5b803590602001918460018302840111600160201b8311171561021857600080fd5b5090925090506103c0565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561026457818101518382015260200161024c565b50505050905090810190601f1680156102915780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156102c45781810151838201526020016102ac565b50505050905090810190601f1680156102f15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b60008061030c6142a0565b6103146142be565b6103988a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600081840152601f19601f820116905080830192505050505050508f610485565b90506103a38161093c565b6103ac81610d52565b935093509350509750975097945050505050565b6060806103cb6142be565b61044f898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508e610485565b905061045a8161093c565b6104678160400151610db5565b92506104768160600151610db5565b91505097509795505050505050565b61048d6142be565b60008460008151811061049c57fe5b602001015160f81c60f81b60f81c90506000856001815181106104bb57fe5b602001015160f81c60f81b60f81c90506000866002815181106104da57fe5b016020015160f81c9050600360606004840160ff166001600160401b038111801561050457600080fd5b5060405190808252806020026020018201604052801561053e57816020015b61052b614350565b8152602001906001900390816105235790505b50905060608360040160ff166001600160401b038111801561055f57600080fd5b5060405190808252806020026020018201604052801561059957816020015b610586614350565b81526020019060019003908161057e5790505b50905060005b8560ff168110156105d5576105b48b856110c1565b8483815181106105c057fe5b6020908102919091010152935060010161059f565b5060005b8460ff1681101561060f576105ee8b856110c1565b8383815181106105fa57fe5b602090810291909101015293506001016105d9565b5061061861438d565b6106228b85611283565b809250819550505060008b858151811061063857fe5b01602001516001959095019460f81c90506106516142be565b6001600160a01b038b35811682526020808d0135909116908201526040810183905261067c83611323565b6060820152608081018f90528d3560a08201526020808f013560c0830152600060e0830181905260408051808201825260ff8c811682528185018a905261010086019190915281518083019092528a8116825292810187905261012084015283821660018114610140850152918b1661016084015261018083018f90526101c083018e90526101e08301526101a08201879052158061071e57508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906107cb5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610790578181015183820152602001610778565b50505050905090810190601f1680156107bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506107d4614350565b60ff83166107f5576107ee8a83604001516000015161138c565b9050610895565b6000865111604051806040016040528060068152602001654e4f5f494d4d60d01b815250906108655760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b506108928a8360400151600001518860018d0360ff168151811061088557fe5b60200260200101516113f0565b90505b61089e81611474565b60408301515260005b838a0360ff168110156108e6576108de8782815181106108c357fe5b602002602001015184604001516115e190919063ffffffff16565b6001016108a7565b5060005b8860ff168110156109275761091f86828151811061090457fe5b602002602001015184604001516115fb90919063ffffffff16565b6001016108ea565b50909f9e505050505050505050505050505050565b60008060006143eb61095585610160015160ff16611615565b9350935093509350600084118061096f5750846101400151155b80156109815750610100850151518410155b806109a957508461014001518015610997575083155b80156109a95750610100850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610a185760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b50610120850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610a8e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b5061010085015151841115610b4c57610aad610aa861172c565b611474565b610abe866060015160200151611474565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610b315760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b50610b3d856005611773565b50610b47856117e8565b610c0c565b61012085015151831115610be757610b65610aa861172c565b610b76866060015160400151611474565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610b315760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b610bf18583611773565b15610bff57610b47856117e8565b610c0c858263ffffffff16565b846101e0015115610cb15760408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120606086015160c001511415610c7357610c6e85606001516117f3565b610cb1565b60006101e0860152606085015160c081015190526101408501518015610c97575083155b610ca657610100850151600090525b610120850151600090525b60005b61010086015151811015610cfd57610cf5866101000151602001518281518110610cda57fe5b602002602001015187606001516115e190919063ffffffff16565b600101610cb4565b5060005b61012086015151811015610d4a57610d42866101200151602001518281518110610d2757fe5b602002602001015187606001516115fb90919063ffffffff16565b600101610d01565b505050505050565b600080610d5d6142a0565b8360e0015184608001516040518060800160405280610d7f88604001516117fd565b8152602001610d9188606001516117fd565b81526020018760a0015181526020018760c001518152509250925092509193909250565b6060610dc482600001516118c1565b610dd9610dd48460200151611474565b6118c1565b610de9610dd48560400151611474565b610df9610dd48660600151611474565b610e09610dd48760800151611474565b610e168760a00151611990565b610e238860c001516118c1565b60405160200180806709ac2c6d0d2dcca560c31b81525060080188805190602001908083835b60208310610e685780518252601f199092019160209182019101610e49565b51815160209384036101000a60001901801990921691161790526216100560e91b9190930190815289516003909101928a0191508083835b60208310610ebf5780518252601f199092019160209182019101610ea0565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528851600390910192890191508083835b60208310610f165780518252601f199092019160209182019101610ef7565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528751600390910192880191508083835b60208310610f6d5780518252601f199092019160209182019101610f4e565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528651600390910192870191508083835b60208310610fc45780518252601f199092019160209182019101610fa5565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528551600390910192860191508083835b6020831061101b5780518252601f199092019160209182019101610ffc565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528451600390910192850191508083835b602083106110725780518252601f199092019160209182019101611053565b6001836020036101000a0380198251168184511680821785525050505050509050018061148560f11b81525060020197505050505050505060405160208183030381529060405290505b919050565b60006110cb614350565b83518310611111576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b60008061111e8686611a6a565b9150915061112a611a91565b60ff168160ff16141561115e5760006111438784611a96565b90935090508261115282611b0a565b9450945050505061127c565b611166611bca565b60ff168160ff1614156111885761117d8683611bcf565b93509350505061127c565b611190611c71565b60ff168160ff1614156111b85760006111a98784611a96565b90935090508261115282611c76565b6111c0611d62565b60ff168160ff1614156111d75761117d8683611d67565b6111df611dfc565b60ff168160ff161015801561120057506111f7611e01565b60ff168160ff16105b1561123c57600061120f611dfc565b820390506060611220828986611e06565b90945090508361122f82611eae565b955095505050505061127c565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b600061128d61438d565b61129561438d565b600060e08201819052806112a98787611a96565b90965091506112b88787611d67565b602085015295506112c98787611d67565b604085015295506112da87876110c1565b606085015295506112eb87876110c1565b608085015295506112fc8787611a96565b60a0850152955061130d8787611a96565b92845260c0840192909252509590945092505050565b61132b61438d565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611394614350565b6040805160608101825260ff8516815260208082018590528251600080825291810184526113e7938301916113df565b6113cc614350565b8152602001906001900390816113c45790505b509052611fef565b90505b92915050565b6113f8614350565b604080516001808252818301909252606091816020015b611417614350565b81526020019060019003908161140f579050509050828160008151811061143a57fe5b602002602001018190525061146b60405180606001604052808760ff16815260200186815260200183815250611fef565b95945050505050565b600061147e611a91565b60ff16826080015160ff1614156114a157815161149a9061207f565b90506110bc565b6114a9611bca565b60ff16826080015160ff1614156114c75761149a82602001516120a3565b6114cf611d62565b60ff16826080015160ff1614156114f157815160a083015161149a91906121a0565b6114f9611dfc565b60ff16826080015160ff16141561153257611512614350565b61151f83604001516121f1565b905061152a81611474565b9150506110bc565b61153a612369565b60ff16826080015160ff161415611553575080516110bc565b61155b611c71565b60ff16826080015160ff1614156115a0575060608082015160408051607b602080830191909152818301939093528151808203830181529301905281519101206110bc565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6115ef82602001518261236e565b82602001819052505050565b61160982604001518261236e565b82604001819052505050565b600080806143eb602085141561163a57506001925060009150600790506123ec611725565b60218514156116585750600192506000915060039050612427611725565b60228514156116765750600292506000915060089050612451611725565b60238514156116955750600192506000915061025890506124f3611725565b60248514156116b35750600392506000915060fa90506126df611725565b60258514156116d05750600092508291506005905061279d611725565b60268514156116ee57506001925060009150600a90506127a6611725565b60405162461bcd60e51b815260040180806020018281038252602c8152602001806144c1602c913960400191505060405180910390fd5b9193509193565b611734614350565b6040805160008082526020820190925261176e91611768565b611755614350565b81526020019060019003908161174d5790505b50611eae565b905090565b6000816001600160401b0316836060015160a0015110156117b8575060e0820180516005016001600160401b03169052606082015160001960a09091015260016113ea565b5060e0820180516001600160401b039083018116909152606083015160a0018051918316909103905260006113ea565b60016101e090910152565b600160e090910152565b600060028260e001511415611814575060006110bc565b60018260e001511415611829575060016110bc565b8151602083015161183990611474565b6118468460400151611474565b6118538560600151611474565b6118608660800151611474565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090506110bc565b60408051818152606081810183529182919060208201818036833701905050905060005b60208110156119895760008482602081106118fc57fe5b1a60f881811b9250601080830480831b9360ff9091169091029003901b61192282612b9d565b85856002028151811061193157fe5b60200101906001600160f81b031916908160001a90535061195181612b9d565b85856002026001018151811061196357fe5b60200101906001600160f81b031916908160001a90535050600190920191506118e59050565b5092915050565b606081806119b75750506040805180820190915260018152600360fc1b60208201526110bc565b8060005b81156119cf57600101600a820491506119bb565b6060816001600160401b03811180156119e757600080fd5b506040519080825280601f01601f191660200182016040528015611a12576020820181803683370190505b50905060001982015b8415611a6057600a850660300160f81b82828060019003935081518110611a3e57fe5b60200101906001600160f81b031916908160001a905350600a85049450611a1b565b5095945050505050565b60008082600101848481518110611a7d57fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611aae575060208385510310155b611aeb576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611aff858563ffffffff612bce16565b915091509250929050565b611b12614350565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191611b68565b611b55614350565b815260200190600190039081611b4d5790505b50905281526020016000604051908082528060200260200182016040528015611bab57816020015b611b98614350565b815260200190600190039081611b905790505b5081526000602082018190526040820152600160609091015292915050565b600190565b6000611bd9614350565b82600080611be5614350565b6000611bf18986611a6a565b9095509350611c008986611a6a565b9095509250600160ff85161415611c2157611c1b89866110c1565b90955091505b611c2b8986612c27565b9095509050600160ff85161415611c565784611c488483856113f0565b96509650505050505061127c565b84611c61848361138c565b9650965050505050509250929050565b600c90565b611c7e614350565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611cc557600080fd5b50604051908082528060200260200182016040528015611cff57816020015b611cec614350565b815260200190600190039081611ce45790505b50905281526020016000604051908082528060200260200182016040528015611d4257816020015b611d2f614350565b815260200190600190039081611d275790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b6000611d71614350565b82845110158015611d86575060408385510310155b611dc3576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b600080611dd08686612c27565b9094509150611ddf8685611a96565b909450905083611def8383612c3e565b9350935050509250929050565b600390565b600d90565b60006060828160ff87166001600160401b0381118015611e2557600080fd5b50604051908082528060200260200182016040528015611e5f57816020015b611e4c614350565b815260200190600190039081611e445790505b50905060005b8760ff168160ff161015611ea157611e7d87846110c1565b838360ff1681518110611e8c57fe5b60209081029190910101529250600101611e65565b5090969095509350505050565b611eb6614350565b611ec08251612cfd565b611f11576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611f4857838181518110611f2b57fe5b602002602001015160a00151820191508080600101915050611f16565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611f9057600080fd5b50604051908082528060200260200182016040528015611fca57816020015b611fb7614350565b815260200190600190039081611faf5790505b5090528152602081019490945260006040850152600360608501526080909301525090565b611ff7614350565b6040518060c001604052806000815260200183815260200160006001600160401b038111801561202657600080fd5b5060405190808252806020026020018201604052801561206057816020015b61204d614350565b8152602001906001900390816120455790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b60006002826040015151106120b457fe5b604082015151612119576120c6611bca565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b9093166021850152602280850191909152825180850390910181526042909301909152815191012090506110bc565b612121611bca565b8260000151612147846040015160008151811061213a57fe5b6020026020010151611474565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b60006121aa611dfc565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b6121f9614350565b600882511115612247576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516001600160401b038111801561226057600080fd5b5060405190808252806020026020018201604052801561228a578160200160208202803683370190505b508051909150600160005b828110156122ed576122ac86828151811061213a57fe5b8482815181106122b857fe5b6020026020010181815250508581815181106122d057fe5b602002602001015160a00151820191508080600101915050612295565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b8381101561233257818101518382015260200161231a565b505050509050019250505060405160208183030381529060405280519060200120905061235f8183612c3e565b9695505050505050565b606490565b612376614350565b6040805160028082526060828101909352816020015b612394614350565b81526020019060019003908161238c57905050905082816000815181106123b757fe5b602002602001018190525083816001815181106123d057fe5b60200260200101819052506123e4816121f1565b949350505050565b6123f4614350565b612402826101000151612d04565b905061242382610100015161241e61241984611474565b611b0a565b612d46565b5050565b61242f614350565b61243d826101000151612d04565b905061242382610100015161241e83612d70565b612459614350565b612467826101000151612d04565b9050612471614350565b61247f836101000151612d04565b905061248a82612da2565b158061249c575061249a81612da2565b155b156124b1576124aa8361279d565b50506124f0565b8151815160408051602080820185905281830184905282518083038401815260609092019092528051910120610100860151610d4a9061241e83611b0a565b50565b6124fb614350565b612509826101000151612d04565b905061251481612dad565b15806125265750806040015151600714155b1561253a576125348261279d565b506124f0565b604081015160005b60078110156125845761256782828151811061255a57fe5b6020026020010151612da2565b61257c576125748461279d565b5050506124f0565b600101612542565b5061258d6143ed565b60005b60198110156125f157604060038216028360048304815181106125af57fe5b602002602001015160000151901c6001600160401b031682600583816125d157fe5b046005840660050201601981106125e457fe5b6020020152600101612590565b506125fb81612dba565b604080516007808252610100820190925291925060609190816020015b612620614350565b81526020019060019003908161261857905050905060005b600781101561266a5761264b6000611b0a565b82828151811061265757fe5b6020908102919091010152600101612638565b5060005b60198110156126c55760406003821602836005830460058406600502016019811061269557fe5b6020020151901b8260048304815181106126ab57fe5b60209081029190910101518051909117905260010161266e565b506126d885610100015161241e83611eae565b5050505050565b6126e7614350565b6126f5826101000151612d04565b90506126ff614350565b61270d836101000151612d04565b9050612717614350565b612725846101000151612d04565b905061273083612da2565b1580612742575061274082612da2565b155b80612753575061275181612da2565b155b15612761576125748461279d565b8251825182516101008701516040805180820190915283815260208101839052612794919061241e90612419908761399f565b50505050505050565b6124f0816117e8565b6127ae614350565b6127bc826101000151612d04565b90506127c7816140bc565b6127d4576125348261279d565b816101a001518261018001515114156127f0576125348261279d565b60d5826101a0015101826101800151511461284a576040805162461bcd60e51b815260206004820152601560248201527457524f4e475f424c414b4532465f4241444441544160581b604482015290519081900360640190fd5b6040805160d5808252610100820190925260609160208201818036833701905050905060005b60d58110156128c75783610180015181856101a00151018151811061289157fe5b602001015160f81c60f81b8282815181106128a857fe5b60200101906001600160f81b031916908160001a905350600101612870565b5060006128d782600060d56140c9565b9050806128e384611474565b1461292d576040805162461bcd60e51b815260206004820152601560248201527457524f4e475f424c414b4532465f4241444441544160581b604482015290519081900360640190fd5b8160d48151811061293a57fe5b6020910101516001600160f81b031916600160f81b148061297457508160d48151811061296357fe5b01602001516001600160f81b031916155b6129bd576040805162461bcd60e51b815260206004820152601560248201527457524f4e475f424c414b4532465f4241444441544160581b604482015290519081900360640190fd5b816000815181106129ca57fe5b01602001516001600160f81b031916151580612a005750816001815181106129ee57fe5b01602001516001600160f81b03191615155b15612aaa57600060f81b82600081518110612a1757fe5b60200101906001600160f81b031916908160001a905350600060f81b82600181518110612a4057fe5b60200101906001600160f81b031916908160001a90535060ff60f81b82600281518110612a6957fe5b60200101906001600160f81b031916908160001a90535060ff60f81b82600381518110612a9257fe5b60200101906001600160f81b031916908160001a9053505b600082600381518110612ab957fe5b602001015160f81c60f81b60f81c60ff16600884600281518110612ad957fe5b016020015160f81c901b179050612af385600a8302611773565b15612b1f5760e085018051600919016001600160401b03169052612b16856117e8565b505050506124f0565b604080518181526060818101835291602082018180368337019050509050600060406020830160d56020880160096107d05a03fa905080612b6357612b638761279d565b6000612b7e8360406000612b7760406140eb565b6001614116565b509050612b9388610100015161241e83611c76565b5050505050505050565b6000600a60f883901c1015612bbd578160f81c60300160f81b90506110bc565b8160f81c60570160f81b90506110bc565b60008160200183511015612c1e576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301611aff858563ffffffff612bce16565b612c46614350565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191612c9c565b612c89614350565b815260200190600190039081612c815790505b50905281526020016000604051908082528060200260200182016040528015612cdf57816020015b612ccc614350565b815260200190600190039081612cc45790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b612d0c614350565b612d14614350565b8260200151600184600001510381518110612d2b57fe5b60209081029190910101518351600019018452915050919050565b808260200151836000015181518110612d5b57fe5b60209081029190910101525080516001019052565b612d78614350565b816080015160ff1660021415612d925761149a6003611b0a565b6113ea826080015160ff16611b0a565b6080015160ff161590565b6080015160ff1660031490565b612dc26143ed565b612dca61440c565b612dd261440c565b612dda6143ed565b612de261442a565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015613994576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b85600360200201518161302e57fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b85600460200201518161306957fe5b0485600460200201516002026001600160401b0316178560026005811061308c57fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b031617836002601981106132f657fe5b602002015260c08701516210000081046001602c1b9091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b909102169190041760808401526101608701516001603a1b906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036001602b1b90910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b03630200000090910216919004176101808401526102408701516001602b1b906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a08701516001602c1b906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600f602002015282600160200201518360156020020151191683601060200201511887601060200201528260026020020151836016602002015119168360116020020151188760116020020152826003602002015183601760200201511916836012602002015118876012602002015282600460200201518360186020020151191683601360200201511887601360200201528260056020020151836000602002015119168360146020020151188760146020020152826006602002015183600160200201511916836015602002015118876015602002015282600760200201518360026020020151191683601660200201511887601660200201528260086020020151836003602002015119168360176020020151188760176020020152826009602002015183600460200201511916836018602002015118876018602002015281816018811061398257fe5b60200201518751188752600101612f09565b509495945050505050565b60006139a9614449565b50604080516108008101825263428a2f9881526371374491602082015263b5c0fbcf9181019190915263e9b5dba56060820152633956c25b60808201526359f111f160a082015263923f82a460c082015263ab1c5ed560e082015263d807aa986101008201526312835b0161012082015263243185be61014082015263550c7dc36101608201526372be5d746101808201526380deb1fe6101a0820152639bdc06a76101c082015263c19bf1746101e082015263e49b69c161020082015263efbe4786610220820152630fc19dc661024082015263240ca1cc610260820152632de92c6f610280820152634a7484aa6102a0820152635cb0a9dc6102c08201526376f988da6102e082015263983e515261030082015263a831c66d61032082015263b00327c861034082015263bf597fc761036082015263c6e00bf361038082015263d5a791476103a08201526306ca63516103c082015263142929676103e08201526327b70a85610400820152632e1b2138610420820152634d2c6dfc6104408201526353380d1361046082015263650a735461048082015263766a0abb6104a08201526381c2c92e6104c08201526392722c856104e082015263a2bfe8a161050082015263a81a664b61052082015263c24b8b7061054082015263c76c51a361056082015263d192e81961058082015263d69906246105a082015263f40e35856105c082015263106aa0706105e08201526319a4c116610600820152631e376c08610620820152632748774c6106408201526334b0bcb561066082015263391c0cb3610680820152634ed8aa4a6106a0820152635b9cca4f6106c082015263682e6ff36106e082015263748f82ee6107008201526378a5636f6107208201526384c87814610740820152638cc702086107608201526390befffa61078082015263a4506ceb6107a082015263bef9a3f76107c082015263c67178f26107e0820152613c74614449565b60005b60088163ffffffff161015613d015763ffffffff6020820260e003168660006020020151901c828263ffffffff1660408110613caf57fe5b63ffffffff92831660209182029290920191909152820260e003168660016020020151901c828260080163ffffffff1660408110613ce957fe5b63ffffffff9092166020929092020152600101613c77565b5060106000805b60408363ffffffff161015613e5d57600384600f850363ffffffff1660408110613d2e57fe5b602002015163ffffffff16901c613d5f85600f860363ffffffff1660408110613d5357fe5b602002015160126141ee565b613d8386600f870363ffffffff1660408110613d7757fe5b602002015160076141ee565b18189150600a846002850363ffffffff1660408110613d9e57fe5b602002015163ffffffff16901c613dcf856002860363ffffffff1660408110613dc357fe5b602002015160136141ee565b613df3866002870363ffffffff1660408110613de757fe5b602002015160116141ee565b1818905080846007850363ffffffff1660408110613e0d57fe5b602002015183866010870363ffffffff1660408110613e2857fe5b6020020151010101848463ffffffff1660408110613e4257fe5b63ffffffff9092166020929092020152600190920191613d08565b613e65614468565b600093505b60088463ffffffff161015613eb6578360200260e00363ffffffff1688901c818563ffffffff1660088110613e9b57fe5b63ffffffff9092166020929092020152600190930192613e6a565b60008060008096505b60408763ffffffff16101561400b576080840151613ede9060196141ee565b6080850151613eee90600b6141ee565b6080860151613efe9060066141ee565b18189450878763ffffffff1660408110613f1457fe5b6020020151898863ffffffff1660408110613f2b57fe5b6020020151608086015160a087015160c0880151613f4a92919061420c565b878760076020020151010101019250613f6b846000602002015160166141ee565b8451613f7890600d6141ee565b8551613f859060026141ee565b6040870180516020890180518a5160c08c01805163ffffffff90811660e08f015260a08e018051821690925260808e018051821690925260608e0180518e01821690925280861690915280831690955284811690925280831891909116911618929091189290921881810186810190931687526001999099019897509092509050613ebf565b600096505b60088763ffffffff16101561405f578660200260e00363ffffffff168b901c848863ffffffff166008811061404157fe5b60200201805163ffffffff9201919091169052600190960195614010565b60008097505b60088863ffffffff1610156140ac578760200260e00363ffffffff16858963ffffffff166008811061409357fe5b602002015160019099019863ffffffff16901b17614065565b9c9b505050505050505050505050565b6080015160ff16600c1490565b6000806140dd8584860186612b77876140eb565b50905061146b607b82614215565b6000600182116140fd575060016110bc565b61410c600260018401046140eb565b60020290506110bc565b6000806020841161416a5785851061413d57614132600061207f565b6001915091506141e4565b600061415261414d89888a614241565b61207f565b90508061415f600061207f565b9093501490506141e4565b6000806141848989600289048a0160028a5b046000614116565b915091508080156141925750845b156141b2576141a789898960028a0489614116565b9350935050506141e4565b6000806141c38b8b8b60028c61417c565b915091506141d18285614215565b8180156141db5750835b95509550505050505b9550959350505050565b63ffffffff9182166020829003831681901b919092169190911c1790565b82191691161890565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600080805b602081101561429757600882901b915060008186018511614268576000614286565b868287018151811061427657fe5b01602001516001600160f81b0319165b60f81c929092179150600101614246565b50949350505050565b60405180608001604052806004906020820280368337509192915050565b6040805161020081018252600080825260208201529081016142de61438d565b81526020016142eb61438d565b81526000602082018190526040820181905260608201819052608082015260a001614314614487565b8152602001614321614487565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c09091015290565b6040518060c001604052806000815260200161436a6144a1565b815260606020820181905260006040830181905290820181905260809091015290565b60408051610100810190915260008152602081016143a9614350565b81526020016143b6614350565b81526020016143c3614350565b81526020016143d0614350565b81526000602082018190526040820181905260609091015290565bfe5b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b6040518061080001604052806040906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a2646970667358221220b981b9d4ce9ad8578aa196237315c04e6084bf5d4d5499acde2614984c9d086564736f6c634300060b0033"

// DeployOneStepProofHash deploys a new Ethereum contract, binding an instance of OneStepProofHash to it.
func DeployOneStepProofHash(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofHash, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofHashABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofHashBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofHash{OneStepProofHashCaller: OneStepProofHashCaller{contract: contract}, OneStepProofHashTransactor: OneStepProofHashTransactor{contract: contract}, OneStepProofHashFilterer: OneStepProofHashFilterer{contract: contract}}, nil
}

// OneStepProofHash is an auto generated Go binding around an Ethereum contract.
type OneStepProofHash struct {
	OneStepProofHashCaller     // Read-only binding to the contract
	OneStepProofHashTransactor // Write-only binding to the contract
	OneStepProofHashFilterer   // Log filterer for contract events
}

// OneStepProofHashCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofHashCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofHashTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofHashFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofHashSession struct {
	Contract     *OneStepProofHash // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofHashCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofHashCallerSession struct {
	Contract *OneStepProofHashCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// OneStepProofHashTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofHashTransactorSession struct {
	Contract     *OneStepProofHashTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// OneStepProofHashRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofHashRaw struct {
	Contract *OneStepProofHash // Generic contract binding to access the raw methods on
}

// OneStepProofHashCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofHashCallerRaw struct {
	Contract *OneStepProofHashCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofHashTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofHashTransactorRaw struct {
	Contract *OneStepProofHashTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofHash creates a new instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHash(address common.Address, backend bind.ContractBackend) (*OneStepProofHash, error) {
	contract, err := bindOneStepProofHash(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHash{OneStepProofHashCaller: OneStepProofHashCaller{contract: contract}, OneStepProofHashTransactor: OneStepProofHashTransactor{contract: contract}, OneStepProofHashFilterer: OneStepProofHashFilterer{contract: contract}}, nil
}

// NewOneStepProofHashCaller creates a new read-only instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofHashCaller, error) {
	contract, err := bindOneStepProofHash(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashCaller{contract: contract}, nil
}

// NewOneStepProofHashTransactor creates a new write-only instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofHashTransactor, error) {
	contract, err := bindOneStepProofHash(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashTransactor{contract: contract}, nil
}

// NewOneStepProofHashFilterer creates a new log filterer instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofHashFilterer, error) {
	contract, err := bindOneStepProofHash(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashFilterer{contract: contract}, nil
}

// bindOneStepProofHash binds a generic wrapper to an already deployed contract.
func bindOneStepProofHash(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofHashABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofHash *OneStepProofHashRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProofHash.Contract.OneStepProofHashCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofHash *OneStepProofHashRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.OneStepProofHashTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofHash *OneStepProofHashRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.OneStepProofHashTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofHash *OneStepProofHashCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProofHash.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofHash *OneStepProofHashTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofHash *OneStepProofHashTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashCaller) ExecuteStep(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProofHash.contract.Call(opts, &out, "executeStep", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		Gas               uint64
		AfterMessagesRead *big.Int
		Fields            [4][32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Gas = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.AfterMessagesRead = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Fields = *abi.ConvertType(out[2], new([4][32]byte)).(*[4][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashSession) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProofHash.Contract.ExecuteStep(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashCallerSession) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProofHash.Contract.ExecuteStep(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashCaller) ExecuteStepDebug(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	var out []interface{}
	err := _OneStepProofHash.contract.Call(opts, &out, "executeStepDebug", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		StartMachine string
		AfterMachine string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartMachine = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.AfterMachine = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashSession) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProofHash.Contract.ExecuteStepDebug(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashCallerSession) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProofHash.Contract.ExecuteStepDebug(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}
