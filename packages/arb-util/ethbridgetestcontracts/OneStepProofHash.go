// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethbridgetestcontracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OneStepProofHashABI is the input ABI used to generate the binding from.
const OneStepProofHashABI = "[{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"afterMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[4]\",\"name\":\"fields\",\"type\":\"bytes32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStepDebug\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"startMachine\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"afterMachine\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// OneStepProofHashBin is the compiled bytecode used for deploying new contracts.
var OneStepProofHashBin = "0x608060405234801561001057600080fd5b50614469806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806347dda1d61461003b578063eba67f6e14610157575b600080fd5b610107600480360360e081101561005157600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111600160201b831117156100ac57600080fd5b919390929091602081019035600160201b8111156100c957600080fd5b8201836020820111156100db57600080fd5b803590602001918460018302840111600160201b831117156100fc57600080fd5b509092509050610301565b604080516001600160401b03851681526020810184905290810182608080838360005b8381101561014257818101518382015260200161012a565b50505050905001935050505060405180910390f35b610223600480360360e081101561016d57600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561019557600080fd5b8201836020820111156101a757600080fd5b803590602001918460018302840111600160201b831117156101c857600080fd5b919390929091602081019035600160201b8111156101e557600080fd5b8201836020820111156101f757600080fd5b803590602001918460018302840111600160201b8311171561021857600080fd5b5090925090506103c0565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561026457818101518382015260200161024c565b50505050905090810190601f1680156102915780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156102c45781810151838201526020016102ac565b50505050905090810190601f1680156102f15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b60008061030c6141e7565b610314614205565b6103988a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600081840152601f19601f820116905080830192505050505050508f610485565b90506103a38161093c565b6103ac81610d52565b935093509350509750975097945050505050565b6060806103cb614205565b61044f898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508e610485565b905061045a8161093c565b6104678160400151610db5565b92506104768160600151610db5565b91505097509795505050505050565b61048d614205565b60008460008151811061049c57fe5b602001015160f81c60f81b60f81c90506000856001815181106104bb57fe5b602001015160f81c60f81b60f81c90506000866002815181106104da57fe5b016020015160f81c9050600360606004840160ff166001600160401b038111801561050457600080fd5b5060405190808252806020026020018201604052801561053e57816020015b61052b614297565b8152602001906001900390816105235790505b50905060608360040160ff166001600160401b038111801561055f57600080fd5b5060405190808252806020026020018201604052801561059957816020015b610586614297565b81526020019060019003908161057e5790505b50905060005b8560ff168110156105d5576105b48b856110c1565b8483815181106105c057fe5b6020908102919091010152935060010161059f565b5060005b8460ff1681101561060f576105ee8b856110c1565b8383815181106105fa57fe5b602090810291909101015293506001016105d9565b506106186142d4565b6106228b85611283565b809250819550505060008b858151811061063857fe5b01602001516001959095019460f81c9050610651614205565b6001600160a01b038b35811682526020808d0135909116908201526040810183905261067c83611323565b6060820152608081018f90528d3560a08201526020808f013560c0830152600060e0830181905260408051808201825260ff8c811682528185018a905261010086019190915281518083019092528a8116825292810187905261012084015283821660018114610140850152918b1661016084015261018083018f90526101c083018e90526101e08301526101a08201879052158061071e57508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906107cb5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610790578181015183820152602001610778565b50505050905090810190601f1680156107bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506107d4614297565b60ff83166107f5576107ee8a83604001516000015161138c565b9050610895565b6000865111604051806040016040528060068152602001654e4f5f494d4d60d01b815250906108655760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b506108928a8360400151600001518860018d0360ff168151811061088557fe5b60200260200101516113f0565b90505b61089e81611474565b60408301515260005b838a0360ff168110156108e6576108de8782815181106108c357fe5b602002602001015184604001516115e190919063ffffffff16565b6001016108a7565b5060005b8860ff168110156109275761091f86828151811061090457fe5b602002602001015184604001516115fb90919063ffffffff16565b6001016108ea565b50909f9e505050505050505050505050505050565b600080600061433261095585610160015160ff16611615565b9350935093509350600084118061096f5750846101400151155b80156109815750610100850151518410155b806109a957508461014001518015610997575083155b80156109a95750610100850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610a185760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b50610120850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610a8e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b5061010085015151841115610b4c57610aad610aa861170f565b611474565b610abe866060015160200151611474565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610b315760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b50610b3d856005611756565b50610b47856117cb565b610c0c565b61012085015151831115610be757610b65610aa861170f565b610b76866060015160400151611474565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610b315760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b610bf18583611756565b15610bff57610b47856117cb565b610c0c858263ffffffff16565b846101e0015115610cb15760408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120606086015160c001511415610c7357610c6e85606001516117d6565b610cb1565b60006101e0860152606085015160c081015190526101408501518015610c97575083155b610ca657610100850151600090525b610120850151600090525b60005b61010086015151811015610cfd57610cf5866101000151602001518281518110610cda57fe5b602002602001015187606001516115e190919063ffffffff16565b600101610cb4565b5060005b61012086015151811015610d4a57610d42866101200151602001518281518110610d2757fe5b602002602001015187606001516115fb90919063ffffffff16565b600101610d01565b505050505050565b600080610d5d6141e7565b8360e0015184608001516040518060800160405280610d7f88604001516117e0565b8152602001610d9188606001516117e0565b81526020018760a0015181526020018760c001518152509250925092509193909250565b6060610dc482600001516118a4565b610dd9610dd48460200151611474565b6118a4565b610de9610dd48560400151611474565b610df9610dd48660600151611474565b610e09610dd48760800151611474565b610e168760a00151611973565b610e238860c001516118a4565b60405160200180806709ac2c6d0d2dcca560c31b81525060080188805190602001908083835b60208310610e685780518252601f199092019160209182019101610e49565b51815160209384036101000a60001901801990921691161790526216100560e91b9190930190815289516003909101928a0191508083835b60208310610ebf5780518252601f199092019160209182019101610ea0565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528851600390910192890191508083835b60208310610f165780518252601f199092019160209182019101610ef7565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528751600390910192880191508083835b60208310610f6d5780518252601f199092019160209182019101610f4e565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528651600390910192870191508083835b60208310610fc45780518252601f199092019160209182019101610fa5565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528551600390910192860191508083835b6020831061101b5780518252601f199092019160209182019101610ffc565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528451600390910192850191508083835b602083106110725780518252601f199092019160209182019101611053565b6001836020036101000a0380198251168184511680821785525050505050509050018061148560f11b81525060020197505050505050505060405160208183030381529060405290505b919050565b60006110cb614297565b83518310611111576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b60008061111e8686611a4d565b9150915061112a611a74565b60ff168160ff16141561115e5760006111438784611a79565b90935090508261115282611aed565b9450945050505061127c565b611166611bad565b60ff168160ff1614156111885761117d8683611bb2565b93509350505061127c565b611190611c54565b60ff168160ff1614156111b85760006111a98784611a79565b90935090508261115282611c59565b6111c0611d45565b60ff168160ff1614156111d75761117d8683611d4a565b6111df611ddf565b60ff168160ff161015801561120057506111f7611de4565b60ff168160ff16105b1561123c57600061120f611ddf565b820390506060611220828986611de9565b90945090508361122f82611e91565b955095505050505061127c565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b600061128d6142d4565b6112956142d4565b600060e08201819052806112a98787611a79565b90965091506112b88787611d4a565b602085015295506112c98787611d4a565b604085015295506112da87876110c1565b606085015295506112eb87876110c1565b608085015295506112fc8787611a79565b60a0850152955061130d8787611a79565b92845260c0840192909252509590945092505050565b61132b6142d4565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611394614297565b6040805160608101825260ff8516815260208082018590528251600080825291810184526113e7938301916113df565b6113cc614297565b8152602001906001900390816113c45790505b509052611fd2565b90505b92915050565b6113f8614297565b604080516001808252818301909252606091816020015b611417614297565b81526020019060019003908161140f579050509050828160008151811061143a57fe5b602002602001018190525061146b60405180606001604052808760ff16815260200186815260200183815250611fd2565b95945050505050565b600061147e611a74565b60ff16826080015160ff1614156114a157815161149a90612062565b90506110bc565b6114a9611bad565b60ff16826080015160ff1614156114c75761149a8260200151612086565b6114cf611d45565b60ff16826080015160ff1614156114f157815160a083015161149a9190612183565b6114f9611ddf565b60ff16826080015160ff16141561153257611512614297565b61151f83604001516121d4565b905061152a81611474565b9150506110bc565b61153a61234c565b60ff16826080015160ff161415611553575080516110bc565b61155b611c54565b60ff16826080015160ff1614156115a0575060608082015160408051607b602080830191909152818301939093528151808203830181529301905281519101206110bc565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6115ef826020015182612351565b82602001819052505050565b611609826040015182612351565b82604001819052505050565b60008080614332602085141561163a57506001925060009150600790506123cf611708565b6021851415611658575060019250600091506003905061240a611708565b60228514156116765750600292506000915060089050612434611708565b60238514156116955750600192506000915061025890506124d6611708565b60248514156116b35750600392506000915060fa90506126c2611708565b60268514156116d157506001925060009150600a9050612780611708565b60405162461bcd60e51b815260040180806020018281038252602c815260200180614408602c913960400191505060405180910390fd5b9193509193565b611717614297565b604080516000808252602082019092526117519161174b565b611738614297565b8152602001906001900390816117305790505b50611e91565b905090565b6000816001600160401b0316836060015160a00151101561179b575060e0820180516005016001600160401b03169052606082015160001960a09091015260016113ea565b5060e0820180516001600160401b039083018116909152606083015160a0018051918316909103905260006113ea565b60016101e090910152565b600160e090910152565b600060028260e0015114156117f7575060006110bc565b60018260e00151141561180c575060016110bc565b8151602083015161181c90611474565b6118298460400151611474565b6118368560600151611474565b6118438660800151611474565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090506110bc565b60408051818152606081810183529182919060208201818036833701905050905060005b602081101561196c5760008482602081106118df57fe5b1a60f881811b9250601080830480831b9360ff9091169091029003901b61190582612ad4565b85856002028151811061191457fe5b60200101906001600160f81b031916908160001a90535061193481612ad4565b85856002026001018151811061194657fe5b60200101906001600160f81b031916908160001a90535050600190920191506118c89050565b5092915050565b6060818061199a5750506040805180820190915260018152600360fc1b60208201526110bc565b8060005b81156119b257600101600a8204915061199e565b6060816001600160401b03811180156119ca57600080fd5b506040519080825280601f01601f1916602001820160405280156119f5576020820181803683370190505b50905060001982015b8415611a4357600a850660300160f81b82828060019003935081518110611a2157fe5b60200101906001600160f81b031916908160001a905350600a850494506119fe565b5095945050505050565b60008082600101848481518110611a6057fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611a91575060208385510310155b611ace576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611ae2858563ffffffff612b0516565b915091509250929050565b611af5614297565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191611b4b565b611b38614297565b815260200190600190039081611b305790505b50905281526020016000604051908082528060200260200182016040528015611b8e57816020015b611b7b614297565b815260200190600190039081611b735790505b5081526000602082018190526040820152600160609091015292915050565b600190565b6000611bbc614297565b82600080611bc8614297565b6000611bd48986611a4d565b9095509350611be38986611a4d565b9095509250600160ff85161415611c0457611bfe89866110c1565b90955091505b611c0e8986612b5e565b9095509050600160ff85161415611c395784611c2b8483856113f0565b96509650505050505061127c565b84611c44848361138c565b9650965050505050509250929050565b600c90565b611c61614297565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611ca857600080fd5b50604051908082528060200260200182016040528015611ce257816020015b611ccf614297565b815260200190600190039081611cc75790505b50905281526020016000604051908082528060200260200182016040528015611d2557816020015b611d12614297565b815260200190600190039081611d0a5790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b6000611d54614297565b82845110158015611d69575060408385510310155b611da6576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b600080611db38686612b5e565b9094509150611dc28685611a79565b909450905083611dd28383612b75565b9350935050509250929050565b600390565b600d90565b60006060828160ff87166001600160401b0381118015611e0857600080fd5b50604051908082528060200260200182016040528015611e4257816020015b611e2f614297565b815260200190600190039081611e275790505b50905060005b8760ff168160ff161015611e8457611e6087846110c1565b838360ff1681518110611e6f57fe5b60209081029190910101529250600101611e48565b5090969095509350505050565b611e99614297565b611ea38251612c34565b611ef4576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611f2b57838181518110611f0e57fe5b602002602001015160a00151820191508080600101915050611ef9565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611f7357600080fd5b50604051908082528060200260200182016040528015611fad57816020015b611f9a614297565b815260200190600190039081611f925790505b5090528152602081019490945260006040850152600360608501526080909301525090565b611fda614297565b6040518060c001604052806000815260200183815260200160006001600160401b038111801561200957600080fd5b5060405190808252806020026020018201604052801561204357816020015b612030614297565b8152602001906001900390816120285790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061209757fe5b6040820151516120fc576120a9611bad565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b9093166021850152602280850191909152825180850390910181526042909301909152815191012090506110bc565b612104611bad565b826000015161212a846040015160008151811061211d57fe5b6020026020010151611474565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600061218d611ddf565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b6121dc614297565b60088251111561222a576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516001600160401b038111801561224357600080fd5b5060405190808252806020026020018201604052801561226d578160200160208202803683370190505b508051909150600160005b828110156122d05761228f86828151811061211d57fe5b84828151811061229b57fe5b6020026020010181815250508581815181106122b357fe5b602002602001015160a00151820191508080600101915050612278565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b838110156123155781810151838201526020016122fd565b50505050905001925050506040516020818303038152906040528051906020012090506123428183612b75565b9695505050505050565b606490565b612359614297565b6040805160028082526060828101909352816020015b612377614297565b81526020019060019003908161236f579050509050828160008151811061239a57fe5b602002602001018190525083816001815181106123b357fe5b60200260200101819052506123c7816121d4565b949350505050565b6123d7614297565b6123e5826101000151612c3b565b90506124068261010001516124016123fc84611474565b611aed565b612c7d565b5050565b612412614297565b612420826101000151612c3b565b905061240682610100015161240183612ca7565b61243c614297565b61244a826101000151612c3b565b9050612454614297565b612462836101000151612c3b565b905061246d82612cd9565b158061247f575061247d81612cd9565b155b156124945761248d83612ce4565b50506124d3565b8151815160408051602080820185905281830184905282518083038401815260609092019092528051910120610100860151610d4a9061240183611aed565b50565b6124de614297565b6124ec826101000151612c3b565b90506124f781612ced565b15806125095750806040015151600714155b1561251d5761251782612ce4565b506124d3565b604081015160005b60078110156125675761254a82828151811061253d57fe5b6020026020010151612cd9565b61255f5761255784612ce4565b5050506124d3565b600101612525565b50612570614334565b60005b60198110156125d4576040600382160283600483048151811061259257fe5b602002602001015160000151901c6001600160401b031682600583816125b457fe5b046005840660050201601981106125c757fe5b6020020152600101612573565b506125de81612cfa565b604080516007808252610100820190925291925060609190816020015b612603614297565b8152602001906001900390816125fb57905050905060005b600781101561264d5761262e6000611aed565b82828151811061263a57fe5b602090810291909101015260010161261b565b5060005b60198110156126a85760406003821602836005830460058406600502016019811061267857fe5b6020020151901b82600483048151811061268e57fe5b602090810291909101015180519091179052600101612651565b506126bb85610100015161240183611e91565b5050505050565b6126ca614297565b6126d8826101000151612c3b565b90506126e2614297565b6126f0836101000151612c3b565b90506126fa614297565b612708846101000151612c3b565b905061271383612cd9565b1580612725575061272382612cd9565b155b80612736575061273481612cd9565b155b156127445761255784612ce4565b82518251825161010087015160408051808201909152838152602081018390526127779190612401906123fc90876138df565b50505050505050565b612788614297565b612796826101000151612c3b565b90506127a181613ffc565b6127ae5761251782612ce4565b816101a001518261018001515114156127ca5761251782612ce4565b60d5826101a00151018261018001515114612824576040805162461bcd60e51b815260206004820152601560248201527457524f4e475f424c414b4532465f4241444441544160581b604482015290519081900360640190fd5b6040805160d5808252610100820190925260609160208201818036833701905050905060005b60d58110156128a15783610180015181856101a00151018151811061286b57fe5b602001015160f81c60f81b82828151811061288257fe5b60200101906001600160f81b031916908160001a90535060010161284a565b5060006128b182600060d5614009565b9050806128bd84611474565b14612907576040805162461bcd60e51b815260206004820152601560248201527457524f4e475f424c414b4532465f4241444441544160581b604482015290519081900360640190fd5b8160008151811061291457fe5b01602001516001600160f81b03191615158061294a57508160018151811061293857fe5b01602001516001600160f81b03191615155b156129f457600060f81b8260008151811061296157fe5b60200101906001600160f81b031916908160001a905350600060f81b8260018151811061298a57fe5b60200101906001600160f81b031916908160001a90535060ff60f81b826002815181106129b357fe5b60200101906001600160f81b031916908160001a90535060ff60f81b826003815181106129dc57fe5b60200101906001600160f81b031916908160001a9053505b600082600381518110612a0357fe5b602001015160f81c60f81b60f81c60ff16600884600281518110612a2357fe5b016020015160f81c901b179050612a3d85600a8302611756565b15612a695760e085018051600919016001600160401b03169052612a60856117cb565b505050506124d3565b604080518181526060818101835291602082018180368337019050509050600060408260d58760096107d05a03fa905080612aa757612aa787612ce4565b6000612ab68360006040614009565b9050612aca88610100015161240183611c59565b5050505050505050565b6000600a60f883901c1015612af4578160f81c60300160f81b90506110bc565b8160f81c60570160f81b90506110bc565b60008160200183511015612b55576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301611ae2858563ffffffff612b0516565b612b7d614297565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191612bd3565b612bc0614297565b815260200190600190039081612bb85790505b50905281526020016000604051908082528060200260200182016040528015612c1657816020015b612c03614297565b815260200190600190039081612bfb5790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b612c43614297565b612c4b614297565b8260200151600184600001510381518110612c6257fe5b60209081029190910101518351600019018452915050919050565b808260200151836000015181518110612c9257fe5b60209081029190910101525080516001019052565b612caf614297565b816080015160ff1660021415612cc95761149a6003611aed565b6113ea826080015160ff16611aed565b6080015160ff161590565b6124d3816117cb565b6080015160ff1660031490565b612d02614334565b612d0a614353565b612d12614353565b612d1a614334565b612d22614371565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b60188110156138d4576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b856003602002015181612f6e57fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b856004602002015181612fa957fe5b0485600460200201516002026001600160401b03161785600260058110612fcc57fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b0316178360026019811061323657fe5b602002015260c08701516210000081046001602c1b9091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b909102169190041760808401526101608701516001603a1b906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036001602b1b90910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b03630200000090910216919004176101808401526102408701516001602b1b906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a08701516001602c1b906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600fc257fe5b60200201518751188752600101612e49565b509495945050505050565b60006138e9614390565b50604080516108008101825263428a2f9881526371374491602082015263b5c0fbcf9181019190915263e9b5dba56060820152633956c25b60808201526359f111f160a082015263923f82a460c082015263ab1c5ed560e082015263d807aa986101008201526312835b0161012082015263243185be61014082015263550c7dc36101608201526372be5d746101808201526380deb1fe6101a0820152639bdc06a76101c082015263c19bf1746101e082015263e49b69c161020082015263efbe4786610220820152630fc19dc661024082015263240ca1cc610260820152632de92c6f610280820152634a7484aa6102a0820152635cb0a9dc6102c08201526376f988da6102e082015263983e515261030082015263a831c66d61032082015263b00327c861034082015263bf597fc761036082015263c6e00bf361038082015263d5a791476103a08201526306ca63516103c082015263142929676103e08201526327b70a85610400820152632e1b2138610420820152634d2c6dfc6104408201526353380d1361046082015263650a735461048082015263766a0abb6104a08201526381c2c92e6104c08201526392722c856104e082015263a2bfe8a161050082015263a81a664b61052082015263c24b8b7061054082015263c76c51a361056082015263d192e81961058082015263d69906246105a082015263f40e35856105c082015263106aa0706105e08201526319a4c116610600820152631e376c08610620820152632748774c6106408201526334b0bcb561066082015263391c0cb3610680820152634ed8aa4a6106a0820152635b9cca4f6106c082015263682e6ff36106e082015263748f82ee6107008201526378a5636f6107208201526384c87814610740820152638cc702086107608201526390befffa61078082015263a4506ceb6107a082015263bef9a3f76107c082015263c67178f26107e0820152613bb4614390565b60005b60088163ffffffff161015613c415763ffffffff6020820260e003168660006020020151901c828263ffffffff1660408110613bef57fe5b63ffffffff92831660209182029290920191909152820260e003168660016020020151901c828260080163ffffffff1660408110613c2957fe5b63ffffffff9092166020929092020152600101613bb7565b5060106000805b60408363ffffffff161015613d9d57600384600f850363ffffffff1660408110613c6e57fe5b602002015163ffffffff16901c613c9f85600f860363ffffffff1660408110613c9357fe5b60200201516012614032565b613cc386600f870363ffffffff1660408110613cb757fe5b60200201516007614032565b18189150600a846002850363ffffffff1660408110613cde57fe5b602002015163ffffffff16901c613d0f856002860363ffffffff1660408110613d0357fe5b60200201516013614032565b613d33866002870363ffffffff1660408110613d2757fe5b60200201516011614032565b1818905080846007850363ffffffff1660408110613d4d57fe5b602002015183866010870363ffffffff1660408110613d6857fe5b6020020151010101848463ffffffff1660408110613d8257fe5b63ffffffff9092166020929092020152600190920191613c48565b613da56143af565b600093505b60088463ffffffff161015613df6578360200260e00363ffffffff1688901c818563ffffffff1660088110613ddb57fe5b63ffffffff9092166020929092020152600190930192613daa565b60008060008096505b60408763ffffffff161015613f4b576080840151613e1e906019614032565b6080850151613e2e90600b614032565b6080860151613e3e906006614032565b18189450878763ffffffff1660408110613e5457fe5b6020020151898863ffffffff1660408110613e6b57fe5b6020020151608086015160a087015160c0880151613e8a929190614050565b878760076020020151010101019250613eab84600060200201516016614032565b8451613eb890600d614032565b8551613ec5906002614032565b6040870180516020890180518a5160c08c01805163ffffffff90811660e08f015260a08e018051821690925260808e018051821690925260608e0180518e01821690925280861690915280831690955284811690925280831891909116911618929091189290921881810186810190931687526001999099019897509092509050613dff565b600096505b60088763ffffffff161015613f9f578660200260e00363ffffffff168b901c848863ffffffff1660088110613f8157fe5b60200201805163ffffffff9201919091169052600190960195613f50565b60008097505b60088863ffffffff161015613fec578760200260e00363ffffffff16858963ffffffff1660088110613fd357fe5b602002015160019099019863ffffffff16901b17613fa5565b9c9b505050505050505050505050565b6080015160ff16600c1490565b600080614024858486018661401d87614059565b6001614084565b50905061146b607b8261415c565b63ffffffff9182166020829003831681901b919092169190911c1790565b82191691161890565b60006001821161406b575060016110bc565b61407a60026001840104614059565b60020290506110bc565b600080602084116140d8578585106140ab576140a06000612062565b600191509150614152565b60006140c06140bb89888a614188565b612062565b9050806140cd6000612062565b909350149050614152565b6000806140f28989600289048a0160028a5b046000614084565b915091508080156141005750845b156141205761411589898960028a0489614084565b935093505050614152565b6000806141318b8b8b60028c6140ea565b9150915061413f828561415c565b8180156141495750835b95509550505050505b9550959350505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600080805b60208110156141de57600882901b9150600081860185116141af5760006141cd565b86828701815181106141bd57fe5b01602001516001600160f81b0319165b60f81c92909217915060010161418d565b50949350505050565b60405180608001604052806004906020820280368337509192915050565b6040805161020081018252600080825260208201529081016142256142d4565b81526020016142326142d4565b81526000602082018190526040820181905260608201819052608082015260a00161425b6143ce565b81526020016142686143ce565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c09091015290565b6040518060c00160405280600081526020016142b16143e8565b815260606020820181905260006040830181905290820181905260809091015290565b60408051610100810190915260008152602081016142f0614297565b81526020016142fd614297565b815260200161430a614297565b8152602001614317614297565b81526000602082018190526040820181905260609091015290565bfe5b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b6040518061080001604052806040906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a2646970667358221220223bdcf4cd3e5b7a3347031d07840fafe3d10bb57dfc4cfa08d73f9c38933f8164736f6c634300060b0033"

// DeployOneStepProofHash deploys a new Ethereum contract, binding an instance of OneStepProofHash to it.
func DeployOneStepProofHash(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OneStepProofHash, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofHashABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OneStepProofHashBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OneStepProofHash{OneStepProofHashCaller: OneStepProofHashCaller{contract: contract}, OneStepProofHashTransactor: OneStepProofHashTransactor{contract: contract}, OneStepProofHashFilterer: OneStepProofHashFilterer{contract: contract}}, nil
}

// OneStepProofHash is an auto generated Go binding around an Ethereum contract.
type OneStepProofHash struct {
	OneStepProofHashCaller     // Read-only binding to the contract
	OneStepProofHashTransactor // Write-only binding to the contract
	OneStepProofHashFilterer   // Log filterer for contract events
}

// OneStepProofHashCaller is an auto generated read-only Go binding around an Ethereum contract.
type OneStepProofHashCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OneStepProofHashTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OneStepProofHashFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OneStepProofHashSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OneStepProofHashSession struct {
	Contract     *OneStepProofHash // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OneStepProofHashCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OneStepProofHashCallerSession struct {
	Contract *OneStepProofHashCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// OneStepProofHashTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OneStepProofHashTransactorSession struct {
	Contract     *OneStepProofHashTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// OneStepProofHashRaw is an auto generated low-level Go binding around an Ethereum contract.
type OneStepProofHashRaw struct {
	Contract *OneStepProofHash // Generic contract binding to access the raw methods on
}

// OneStepProofHashCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OneStepProofHashCallerRaw struct {
	Contract *OneStepProofHashCaller // Generic read-only contract binding to access the raw methods on
}

// OneStepProofHashTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OneStepProofHashTransactorRaw struct {
	Contract *OneStepProofHashTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOneStepProofHash creates a new instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHash(address common.Address, backend bind.ContractBackend) (*OneStepProofHash, error) {
	contract, err := bindOneStepProofHash(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHash{OneStepProofHashCaller: OneStepProofHashCaller{contract: contract}, OneStepProofHashTransactor: OneStepProofHashTransactor{contract: contract}, OneStepProofHashFilterer: OneStepProofHashFilterer{contract: contract}}, nil
}

// NewOneStepProofHashCaller creates a new read-only instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashCaller(address common.Address, caller bind.ContractCaller) (*OneStepProofHashCaller, error) {
	contract, err := bindOneStepProofHash(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashCaller{contract: contract}, nil
}

// NewOneStepProofHashTransactor creates a new write-only instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashTransactor(address common.Address, transactor bind.ContractTransactor) (*OneStepProofHashTransactor, error) {
	contract, err := bindOneStepProofHash(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashTransactor{contract: contract}, nil
}

// NewOneStepProofHashFilterer creates a new log filterer instance of OneStepProofHash, bound to a specific deployed contract.
func NewOneStepProofHashFilterer(address common.Address, filterer bind.ContractFilterer) (*OneStepProofHashFilterer, error) {
	contract, err := bindOneStepProofHash(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OneStepProofHashFilterer{contract: contract}, nil
}

// bindOneStepProofHash binds a generic wrapper to an already deployed contract.
func bindOneStepProofHash(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OneStepProofHashABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofHash *OneStepProofHashRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProofHash.Contract.OneStepProofHashCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofHash *OneStepProofHashRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.OneStepProofHashTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofHash *OneStepProofHashRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.OneStepProofHashTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OneStepProofHash *OneStepProofHashCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OneStepProofHash.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OneStepProofHash *OneStepProofHashTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OneStepProofHash *OneStepProofHashTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OneStepProofHash.Contract.contract.Transact(opts, method, params...)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashCaller) ExecuteStep(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	var out []interface{}
	err := _OneStepProofHash.contract.Call(opts, &out, "executeStep", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		Gas               uint64
		AfterMessagesRead *big.Int
		Fields            [4][32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Gas = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.AfterMessagesRead = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Fields = *abi.ConvertType(out[2], new([4][32]byte)).(*[4][32]byte)

	return *outstruct, err

}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashSession) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProofHash.Contract.ExecuteStep(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStep is a free data retrieval call binding the contract method 0x47dda1d6.
//
// Solidity: function executeStep(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(uint64 gas, uint256 afterMessagesRead, bytes32[4] fields)
func (_OneStepProofHash *OneStepProofHashCallerSession) ExecuteStep(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	Gas               uint64
	AfterMessagesRead *big.Int
	Fields            [4][32]byte
}, error) {
	return _OneStepProofHash.Contract.ExecuteStep(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashCaller) ExecuteStepDebug(opts *bind.CallOpts, bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	var out []interface{}
	err := _OneStepProofHash.contract.Call(opts, &out, "executeStepDebug", bridges, initialMessagesRead, accs, proof, bproof)

	outstruct := new(struct {
		StartMachine string
		AfterMachine string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartMachine = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.AfterMachine = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashSession) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProofHash.Contract.ExecuteStepDebug(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}

// ExecuteStepDebug is a free data retrieval call binding the contract method 0xeba67f6e.
//
// Solidity: function executeStepDebug(address[2] bridges, uint256 initialMessagesRead, bytes32[2] accs, bytes proof, bytes bproof) view returns(string startMachine, string afterMachine)
func (_OneStepProofHash *OneStepProofHashCallerSession) ExecuteStepDebug(bridges [2]common.Address, initialMessagesRead *big.Int, accs [2][32]byte, proof []byte, bproof []byte) (struct {
	StartMachine string
	AfterMachine string
}, error) {
	return _OneStepProofHash.Contract.ExecuteStepDebug(&_OneStepProofHash.CallOpts, bridges, initialMessagesRead, accs, proof, bproof)
}
